@model Hinata.Models.DraftEditViewModel
@{
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
    ViewBag.Title = "下書き";
}
<div class="navbar navbar-default navbar-static-top">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink("Hinata", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
        </div>
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav"></ul>
            @Html.Partial("_AccountPartial")
        </div>
    </div>
</div>
<div class="container-fluid">
    @using (Html.BeginForm("Edit", "Draft", FormMethod.Post, new { role = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.Id)
        <div class="form-group">
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control input-lg", @placeholder = @Html.DisplayNameFor(m => m.Title) })
            @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.TextBoxFor(m => m.TagInlineString, new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.TagInlineString) })
            @Html.ValidationMessageFor(m => m.TagInlineString, "", new { @class = "text-danger" })
        </div>
        <div class="form-group row">
            <div class="col-md-6 editor-panel-area">
                <div class="panel panel-default">
                    <div class="panel-heading">Markdown</div>
                    <div class="panel-body" style="max-height: 500px; min-height: 500px; padding: 0;">
                        @Html.TextAreaFor(m => m.Body, new { @id = "item-editor", @class = "form-control item-editor" })
                        <div class="text-center">
                            <div class="file">
                                画像を選択してアップロード
                                <input type="file" id="update-file" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 hidden-xs" style="padding-left: 0;">
                <div class="panel panel-default">
                    <div class="panel-heading">Preview</div>
                    <div class="panel-body" style="max-height: 500px; min-height: 500px; overflow-y: auto; overflow-x: hidden; padding: 0;">
                        <div id="item-view" class="item-view markdown-body" style="padding: 10px;">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="btn-group dropup pull-right">
                <input id="btnSubmit" type="submit" class="btn btn-primary" value="投稿" />
                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                    <span class="caret"></span>
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li><a href="#" data-mode="Draft">下書き保存</a></li>
                    <li><a href="#" data-mode="Private">限定公開</a></li>
                    <li><a href="#" data-mode="Post">投稿</a></li>
                </ul>
            </div>
            @Html.HiddenFor(m => m.RegisterMode)
        </div>
    }
</div>
@section scripts {
    <script>
        $(function () {
            markdownPreview('item-editor', 'item-view');

            var oldvalue = "";
            setInterval(function () {
                if ($('#item-editor').val() !== oldvalue && $('.hidden-xs').is(':visible')) {
                    oldvalue = $('#item-editor').val();
                    markdownPreview('item-editor', 'item-view');
                }
            }, 3000);

            $('ul.dropdown-menu a').click(function () {
                var self = this;
                var mode = $(self).data('mode');

                $('#RegisterMode').val(mode);
                $('#btnSubmit').val($(self).text());
            });

            $('#update-file').on('change', function (e) {
                var files = e.target.files;
                if (files.length > 0) {
                    if (window.FormData !== undefined) {
                        var data = new FormData();
                        for (var x = 0; x < files.length; x++) {
                            data.append("file" + x, files[x]);
                        }

                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("Upload", "Image")?itemid=' + $('#Id').val(),
                            contentType: false,
                            processData: false,
                            data: data,
                            success: function (result) {
                                insertAtCaret('item-editor', '![' + result.FileName + '](' + result.Url + ')');
                            },
                            error: function (xhr, status, p3, p4) {
                                var err = "Error " + " " + status + " " + p3 + " " + p4;
                                if (xhr.responseText && xhr.responseText[0] == "{")
                                    err = JSON.parse(xhr.responseText).Message;
                                console.log(err);
                            }
                        });
                    } else {
                        alert("This browser doesn't support HTML5 file uploads!");
                    }
                }
            });
        });

        function markdownPreview(editorId, viewId) {
            var editorArea = document.getElementById(editorId);
            var viewArea = document.getElementById(viewId);
            var data = {};
            data.markdown = editorArea.value;
            $.ajax({
                url: "@Url.Action("Transform", "Draft")",
                type: "POST",
                dataType: "html",
                data: data,
                success: function (html) {
                    viewArea.innerHTML = html;
                },
            });
        }

        function insertAtCaret(areaId, text) {
            var txtarea = document.getElementById(areaId);
            var scrollPos = txtarea.scrollTop;
            var strPos = 0;
            var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?
                "ff" : (document.selection ? "ie" : false));
            if (br == "ie") {
                txtarea.focus();
                var range = document.selection.createRange();
                range.moveStart('character', -txtarea.value.length);
                strPos = range.text.length;
            } else if (br == "ff") strPos = txtarea.selectionStart;

            var front = (txtarea.value).substring(0, strPos);
            var back = (txtarea.value).substring(strPos, txtarea.value.length);
            txtarea.value = front + text + back;
            strPos = strPos + text.length;
            if (br == "ie") {
                txtarea.focus();
                var range = document.selection.createRange();
                range.moveStart('character', -txtarea.value.length);
                range.moveStart('character', strPos);
                range.moveEnd('character', 0);
                range.select();
            } else if (br == "ff") {
                txtarea.selectionStart = strPos;
                txtarea.selectionEnd = strPos;
                txtarea.focus();
            }
            txtarea.scrollTop = scrollPos;
        }
    </script>
}